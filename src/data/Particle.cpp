/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

/**
 * @brief Constructs a particle with a specified type.
 * 
 * This constructor initializes a particle object with the provided type. 
 * It sets the type member variable to the value of type_arg.
 * Additionally, it initializes the force (f) and old force (old_f) arrays to {0., 0., 0.}.
 * Finally, it outputs a message indicating that the particle has been generated.
 * 
 * @param type_arg The type of the particle.
 */
Particle::Particle(int type_arg) 
  : f({0., 0., 0.}), 
    old_f({0., 0., 0.}), 
    m(1), 
    type(type_arg), 
    is_outer(false),
    sigma(1),
    sigmaHalf(0.5),
    epsilon(5),
    rootEpsilon(std::sqrt(epsilon)),
    domainStart({0., 0., 0.}), 
    strategy(0) {
      #ifdef _OPENMP
      omp_init_lock(&lock);
      #endif
      
      spdlog::info("Particle generated with type.");
    }

Particle::Particle(const Particle &other)
  : x(other.x),
    v(other.v),
    f(other.f),
    old_f(other.old_f),
    m(other.m),
    type(other.type),
    is_outer(other.is_outer),
    sigma(other.sigma),
    sigmaHalf(other.sigma / 2.0),
    epsilon(other.epsilon),
    rootEpsilon(std::sqrt(other.epsilon)),
    domainStart(other.domainStart), 
    strategy(0) {
      #ifdef _OPENMP
      omp_init_lock(&lock);
      #endif
      
      spdlog::info("Particle generated by copy!");
    }

// Constructor with full parameters using initializer list
Particle::Particle(std::array<double, 3> x_arg, std::array<double, 3> v_arg, double m_arg, int type_arg, bool is_outer_arg, 
double sigma, double epsilon, std::array<double,3> domainStart) 
  : x(x_arg - domainStart),
    v(v_arg),
    f({0., 0., 0.}),
    old_f({0., 0., 0.}),
    m(m_arg),
    type(type_arg),
    is_outer(is_outer_arg),
    sigma(sigma),
    sigmaHalf(sigma / 2.0),
    epsilon(epsilon),
    rootEpsilon(std::sqrt(epsilon)),
    domainStart(domainStart),
    strategy(0) {
      #ifdef _OPENMP
      omp_init_lock(&lock);
      #endif
      spdlog::info("Particle generated with full parameters.");
    }


Particle::~Particle() {
  // Cannot use logging because at end of main logger is destructed before particles -> Would lead to use-after-free;
  #ifdef _OPENMP
  omp_destroy_lock(&lock);
  #endif
}

const std::array<double, 3> &Particle::getX() const { return x; }

const std::array<double, 3> &Particle::getV() const { return v; }

const std::array<double, 3> &Particle::getF() const { return f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }

const std::array<double, 3> &Particle::getDomainStart() const { return domainStart; }

const std::array<Particle*,4> &Particle::getNeighbours() const {return neighbours;}

const std::array<bool,4> &Particle::getHasNeighbour() const {return hasNeighbour;}

const bool Particle::getIsOuter() const { return is_outer; }

const double Particle::getSigma() const{  return sigma;}

const double Particle::getSigmaHalf() const{  return sigmaHalf;}

const double Particle::getEpsilon() const{  return epsilon;}

const double Particle::getRootEpsilon() const{  return rootEpsilon;}

const double Particle::getM() const { return m; }

const int Particle::getType() const { return type; }

void Particle::setX(const std::array<double, 3>& newX) {
  x = newX;
}

void Particle::setV(const std::array<double, 3>& newV) {
  v = newV;
}

void Particle::setF(const std::array<double, 3>& newF) {
  if(!is_outer){
    f = newF;
  }
}

void Particle::setOldF(const std::array<double, 3>& newOldF) {
  if(!is_outer){
    old_f = newOldF;
  }
}

void Particle::applyF(const std::array<double, 3>& force){
  if(!is_outer){
    if(strategy == 0){
      f = f+force;
    }
    if(strategy == 1){
      #ifdef _OPENMP
      #pragma omp critical
      #endif
      {
        f = f+force;
      }
    }
    if(strategy == 2 || strategy == 3){
      #ifdef _OPENMP
      omp_set_lock(&lock);
      #endif
      f = f+force;
      #ifdef _OPENMP
      omp_unset_lock(&lock);
      #endif
    }
  }
}

void Particle::setIsOuter(bool newIsOuter) {
  is_outer = newIsOuter;
}

void Particle::setStrategy(const size_t newStrategy){
  strategy = newStrategy;
}

std::string Particle::toString() const {
  std::stringstream stream;
  stream << "Particle: X:" << x << " v: " << v << " f: " << f
         << " old_f: " << old_f << " type: " << type;
  return stream.str();
}

bool Particle::operator==(const Particle &other) const {
  return (x == other.x) and (v == other.v) and (f == other.f) and
         (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

std::ostream & operator<<(std::ostream &stream, const Particle &p) {
  stream << p.toString();
  return stream;
}

void Particle::addNeighbour(Particle* neighbour, const int position){
  neighbours[position] = neighbour;
  hasNeighbour[position] = true;
}