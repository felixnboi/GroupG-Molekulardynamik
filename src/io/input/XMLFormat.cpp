// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "XMLFormat.h"

// double_vector
// 

const double_vector::x_type& double_vector::
x () const
{
  return this->x_.get ();
}

double_vector::x_type& double_vector::
x ()
{
  return this->x_.get ();
}

void double_vector::
x (const x_type& x)
{
  this->x_.set (x);
}

const double_vector::y_type& double_vector::
y () const
{
  return this->y_.get ();
}

double_vector::y_type& double_vector::
y ()
{
  return this->y_.get ();
}

void double_vector::
y (const y_type& x)
{
  this->y_.set (x);
}

const double_vector::z_type& double_vector::
z () const
{
  return this->z_.get ();
}

double_vector::z_type& double_vector::
z ()
{
  return this->z_.get ();
}

void double_vector::
z (const z_type& x)
{
  this->z_.set (x);
}


// unsigned_vector
// 

const unsigned_vector::x_type& unsigned_vector::
x () const
{
  return this->x_.get ();
}

unsigned_vector::x_type& unsigned_vector::
x ()
{
  return this->x_.get ();
}

void unsigned_vector::
x (const x_type& x)
{
  this->x_.set (x);
}

const unsigned_vector::y_type& unsigned_vector::
y () const
{
  return this->y_.get ();
}

unsigned_vector::y_type& unsigned_vector::
y ()
{
  return this->y_.get ();
}

void unsigned_vector::
y (const y_type& x)
{
  this->y_.set (x);
}

const unsigned_vector::z_type& unsigned_vector::
z () const
{
  return this->z_.get ();
}

unsigned_vector::z_type& unsigned_vector::
z ()
{
  return this->z_.get ();
}

void unsigned_vector::
z (const z_type& x)
{
  this->z_.set (x);
}


// boundaryBehavior
// 

boundaryBehavior::
boundaryBehavior (value v)
: ::xml_schema::string (_xsd_boundaryBehavior_literals_[v])
{
}

boundaryBehavior::
boundaryBehavior (const char* v)
: ::xml_schema::string (v)
{
}

boundaryBehavior::
boundaryBehavior (const ::std::string& v)
: ::xml_schema::string (v)
{
}

boundaryBehavior::
boundaryBehavior (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

boundaryBehavior::
boundaryBehavior (const boundaryBehavior& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

boundaryBehavior& boundaryBehavior::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_boundaryBehavior_literals_[v]);

  return *this;
}


// forces
// 

forces::
forces (value v)
: ::xml_schema::string (_xsd_forces_literals_[v])
{
}

forces::
forces (const char* v)
: ::xml_schema::string (v)
{
}

forces::
forces (const ::std::string& v)
: ::xml_schema::string (v)
{
}

forces::
forces (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

forces::
forces (const forces& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

forces& forces::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_forces_literals_[v]);

  return *this;
}


// algorithms
// 

algorithms::
algorithms (value v)
: ::xml_schema::string (_xsd_algorithms_literals_[v])
{
}

algorithms::
algorithms (const char* v)
: ::xml_schema::string (v)
{
}

algorithms::
algorithms (const ::std::string& v)
: ::xml_schema::string (v)
{
}

algorithms::
algorithms (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

algorithms::
algorithms (const algorithms& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

algorithms& algorithms::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_algorithms_literals_[v]);

  return *this;
}


// loglevels
// 

loglevels::
loglevels (value v)
: ::xml_schema::string (_xsd_loglevels_literals_[v])
{
}

loglevels::
loglevels (const char* v)
: ::xml_schema::string (v)
{
}

loglevels::
loglevels (const ::std::string& v)
: ::xml_schema::string (v)
{
}

loglevels::
loglevels (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

loglevels::
loglevels (const loglevels& v,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

loglevels& loglevels::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_loglevels_literals_[v]);

  return *this;
}


// simulation
// 

const simulation::boundaries_type& simulation::
boundaries () const
{
  return this->boundaries_.get ();
}

simulation::boundaries_type& simulation::
boundaries ()
{
  return this->boundaries_.get ();
}

void simulation::
boundaries (const boundaries_type& x)
{
  this->boundaries_.set (x);
}

void simulation::
boundaries (::std::unique_ptr< boundaries_type > x)
{
  this->boundaries_.set (std::move (x));
}

const simulation::inputSettings_type& simulation::
inputSettings () const
{
  return this->inputSettings_.get ();
}

simulation::inputSettings_type& simulation::
inputSettings ()
{
  return this->inputSettings_.get ();
}

void simulation::
inputSettings (const inputSettings_type& x)
{
  this->inputSettings_.set (x);
}

void simulation::
inputSettings (::std::unique_ptr< inputSettings_type > x)
{
  this->inputSettings_.set (std::move (x));
}

const simulation::outputSettings_type& simulation::
outputSettings () const
{
  return this->outputSettings_.get ();
}

simulation::outputSettings_type& simulation::
outputSettings ()
{
  return this->outputSettings_.get ();
}

void simulation::
outputSettings (const outputSettings_type& x)
{
  this->outputSettings_.set (x);
}

void simulation::
outputSettings (::std::unique_ptr< outputSettings_type > x)
{
  this->outputSettings_.set (std::move (x));
}

const simulation::simulationParameters_type& simulation::
simulationParameters () const
{
  return this->simulationParameters_.get ();
}

simulation::simulationParameters_type& simulation::
simulationParameters ()
{
  return this->simulationParameters_.get ();
}

void simulation::
simulationParameters (const simulationParameters_type& x)
{
  this->simulationParameters_.set (x);
}

void simulation::
simulationParameters (::std::unique_ptr< simulationParameters_type > x)
{
  this->simulationParameters_.set (std::move (x));
}

const simulation::thermostat_optional& simulation::
thermostat () const
{
  return this->thermostat_;
}

simulation::thermostat_optional& simulation::
thermostat ()
{
  return this->thermostat_;
}

void simulation::
thermostat (const thermostat_type& x)
{
  this->thermostat_.set (x);
}

void simulation::
thermostat (const thermostat_optional& x)
{
  this->thermostat_ = x;
}

void simulation::
thermostat (::std::unique_ptr< thermostat_type > x)
{
  this->thermostat_.set (std::move (x));
}

const simulation::checkpoint_optional& simulation::
checkpoint () const
{
  return this->checkpoint_;
}

simulation::checkpoint_optional& simulation::
checkpoint ()
{
  return this->checkpoint_;
}

void simulation::
checkpoint (const checkpoint_type& x)
{
  this->checkpoint_.set (x);
}

void simulation::
checkpoint (const checkpoint_optional& x)
{
  this->checkpoint_ = x;
}

void simulation::
checkpoint (::std::unique_ptr< checkpoint_type > x)
{
  this->checkpoint_.set (std::move (x));
}

const simulation::cuboid_sequence& simulation::
cuboid () const
{
  return this->cuboid_;
}

simulation::cuboid_sequence& simulation::
cuboid ()
{
  return this->cuboid_;
}

void simulation::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const simulation::disc_sequence& simulation::
disc () const
{
  return this->disc_;
}

simulation::disc_sequence& simulation::
disc ()
{
  return this->disc_;
}

void simulation::
disc (const disc_sequence& s)
{
  this->disc_ = s;
}


// boundaries
// 

const boundaries::left_type& boundaries::
left () const
{
  return this->left_.get ();
}

boundaries::left_type& boundaries::
left ()
{
  return this->left_.get ();
}

void boundaries::
left (const left_type& x)
{
  this->left_.set (x);
}

void boundaries::
left (::std::unique_ptr< left_type > x)
{
  this->left_.set (std::move (x));
}

const boundaries::right_type& boundaries::
right () const
{
  return this->right_.get ();
}

boundaries::right_type& boundaries::
right ()
{
  return this->right_.get ();
}

void boundaries::
right (const right_type& x)
{
  this->right_.set (x);
}

void boundaries::
right (::std::unique_ptr< right_type > x)
{
  this->right_.set (std::move (x));
}

const boundaries::bottom_type& boundaries::
bottom () const
{
  return this->bottom_.get ();
}

boundaries::bottom_type& boundaries::
bottom ()
{
  return this->bottom_.get ();
}

void boundaries::
bottom (const bottom_type& x)
{
  this->bottom_.set (x);
}

void boundaries::
bottom (::std::unique_ptr< bottom_type > x)
{
  this->bottom_.set (std::move (x));
}

const boundaries::top_type& boundaries::
top () const
{
  return this->top_.get ();
}

boundaries::top_type& boundaries::
top ()
{
  return this->top_.get ();
}

void boundaries::
top (const top_type& x)
{
  this->top_.set (x);
}

void boundaries::
top (::std::unique_ptr< top_type > x)
{
  this->top_.set (std::move (x));
}

const boundaries::rear_type& boundaries::
rear () const
{
  return this->rear_.get ();
}

boundaries::rear_type& boundaries::
rear ()
{
  return this->rear_.get ();
}

void boundaries::
rear (const rear_type& x)
{
  this->rear_.set (x);
}

void boundaries::
rear (::std::unique_ptr< rear_type > x)
{
  this->rear_.set (std::move (x));
}

const boundaries::front_type& boundaries::
front () const
{
  return this->front_.get ();
}

boundaries::front_type& boundaries::
front ()
{
  return this->front_.get ();
}

void boundaries::
front (const front_type& x)
{
  this->front_.set (x);
}

void boundaries::
front (::std::unique_ptr< front_type > x)
{
  this->front_.set (std::move (x));
}


// inputSettings
// 

const inputSettings::inputFile_type& inputSettings::
inputFile () const
{
  return this->inputFile_.get ();
}

inputSettings::inputFile_type& inputSettings::
inputFile ()
{
  return this->inputFile_.get ();
}

void inputSettings::
inputFile (const inputFile_type& x)
{
  this->inputFile_.set (x);
}

void inputSettings::
inputFile (::std::unique_ptr< inputFile_type > x)
{
  this->inputFile_.set (std::move (x));
}


// outputSettings
// 

const outputSettings::baseName_type& outputSettings::
baseName () const
{
  return this->baseName_.get ();
}

outputSettings::baseName_type& outputSettings::
baseName ()
{
  return this->baseName_.get ();
}

void outputSettings::
baseName (const baseName_type& x)
{
  this->baseName_.set (x);
}

void outputSettings::
baseName (::std::unique_ptr< baseName_type > x)
{
  this->baseName_.set (std::move (x));
}

const outputSettings::writeFrequency_type& outputSettings::
writeFrequency () const
{
  return this->writeFrequency_.get ();
}

outputSettings::writeFrequency_type& outputSettings::
writeFrequency ()
{
  return this->writeFrequency_.get ();
}

void outputSettings::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}


// simulationParameters
// 

const simulationParameters::end_t_type& simulationParameters::
end_t () const
{
  return this->end_t_.get ();
}

simulationParameters::end_t_type& simulationParameters::
end_t ()
{
  return this->end_t_.get ();
}

void simulationParameters::
end_t (const end_t_type& x)
{
  this->end_t_.set (x);
}

const simulationParameters::delta_t_type& simulationParameters::
delta_t () const
{
  return this->delta_t_.get ();
}

simulationParameters::delta_t_type& simulationParameters::
delta_t ()
{
  return this->delta_t_.get ();
}

void simulationParameters::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const simulationParameters::start_t_type& simulationParameters::
start_t () const
{
  return this->start_t_.get ();
}

simulationParameters::start_t_type& simulationParameters::
start_t ()
{
  return this->start_t_.get ();
}

void simulationParameters::
start_t (const start_t_type& x)
{
  this->start_t_.set (x);
}

const simulationParameters::force_type& simulationParameters::
force () const
{
  return this->force_.get ();
}

simulationParameters::force_type& simulationParameters::
force ()
{
  return this->force_.get ();
}

void simulationParameters::
force (const force_type& x)
{
  this->force_.set (x);
}

void simulationParameters::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const simulationParameters::algorithm_type& simulationParameters::
algorithm () const
{
  return this->algorithm_.get ();
}

simulationParameters::algorithm_type& simulationParameters::
algorithm ()
{
  return this->algorithm_.get ();
}

void simulationParameters::
algorithm (const algorithm_type& x)
{
  this->algorithm_.set (x);
}

void simulationParameters::
algorithm (::std::unique_ptr< algorithm_type > x)
{
  this->algorithm_.set (std::move (x));
}

const simulationParameters::loglevel_type& simulationParameters::
loglevel () const
{
  return this->loglevel_.get ();
}

simulationParameters::loglevel_type& simulationParameters::
loglevel ()
{
  return this->loglevel_.get ();
}

void simulationParameters::
loglevel (const loglevel_type& x)
{
  this->loglevel_.set (x);
}

void simulationParameters::
loglevel (::std::unique_ptr< loglevel_type > x)
{
  this->loglevel_.set (std::move (x));
}

const simulationParameters::domain_type& simulationParameters::
domain () const
{
  return this->domain_.get ();
}

simulationParameters::domain_type& simulationParameters::
domain ()
{
  return this->domain_.get ();
}

void simulationParameters::
domain (const domain_type& x)
{
  this->domain_.set (x);
}

void simulationParameters::
domain (::std::unique_ptr< domain_type > x)
{
  this->domain_.set (std::move (x));
}

const simulationParameters::domain_start_type& simulationParameters::
domain_start () const
{
  return this->domain_start_.get ();
}

simulationParameters::domain_start_type& simulationParameters::
domain_start ()
{
  return this->domain_start_.get ();
}

void simulationParameters::
domain_start (const domain_start_type& x)
{
  this->domain_start_.set (x);
}

void simulationParameters::
domain_start (::std::unique_ptr< domain_start_type > x)
{
  this->domain_start_.set (std::move (x));
}

const simulationParameters::cutoff_radius_type& simulationParameters::
cutoff_radius () const
{
  return this->cutoff_radius_.get ();
}

simulationParameters::cutoff_radius_type& simulationParameters::
cutoff_radius ()
{
  return this->cutoff_radius_.get ();
}

void simulationParameters::
cutoff_radius (const cutoff_radius_type& x)
{
  this->cutoff_radius_.set (x);
}

const simulationParameters::grav_constant_type& simulationParameters::
grav_constant () const
{
  return this->grav_constant_.get ();
}

simulationParameters::grav_constant_type& simulationParameters::
grav_constant ()
{
  return this->grav_constant_.get ();
}

void simulationParameters::
grav_constant (const grav_constant_type& x)
{
  this->grav_constant_.set (x);
}


// thermostat
// 

const thermostat::T_init_optional& thermostat::
T_init () const
{
  return this->T_init_;
}

thermostat::T_init_optional& thermostat::
T_init ()
{
  return this->T_init_;
}

void thermostat::
T_init (const T_init_type& x)
{
  this->T_init_.set (x);
}

void thermostat::
T_init (const T_init_optional& x)
{
  this->T_init_ = x;
}

const thermostat::T_target_optional& thermostat::
T_target () const
{
  return this->T_target_;
}

thermostat::T_target_optional& thermostat::
T_target ()
{
  return this->T_target_;
}

void thermostat::
T_target (const T_target_type& x)
{
  this->T_target_.set (x);
}

void thermostat::
T_target (const T_target_optional& x)
{
  this->T_target_ = x;
}

const thermostat::T_diff_optional& thermostat::
T_diff () const
{
  return this->T_diff_;
}

thermostat::T_diff_optional& thermostat::
T_diff ()
{
  return this->T_diff_;
}

void thermostat::
T_diff (const T_diff_type& x)
{
  this->T_diff_.set (x);
}

void thermostat::
T_diff (const T_diff_optional& x)
{
  this->T_diff_ = x;
}

const thermostat::n_thermostat_type& thermostat::
n_thermostat () const
{
  return this->n_thermostat_.get ();
}

thermostat::n_thermostat_type& thermostat::
n_thermostat ()
{
  return this->n_thermostat_.get ();
}

void thermostat::
n_thermostat (const n_thermostat_type& x)
{
  this->n_thermostat_.set (x);
}

const thermostat::brownian_motion_dimension_type& thermostat::
brownian_motion_dimension () const
{
  return this->brownian_motion_dimension_.get ();
}

thermostat::brownian_motion_dimension_type& thermostat::
brownian_motion_dimension ()
{
  return this->brownian_motion_dimension_.get ();
}

void thermostat::
brownian_motion_dimension (const brownian_motion_dimension_type& x)
{
  this->brownian_motion_dimension_.set (x);
}


// checkpoint
// 

const checkpoint::checkpoint_file_optional& checkpoint::
checkpoint_file () const
{
  return this->checkpoint_file_;
}

checkpoint::checkpoint_file_optional& checkpoint::
checkpoint_file ()
{
  return this->checkpoint_file_;
}

void checkpoint::
checkpoint_file (const checkpoint_file_type& x)
{
  this->checkpoint_file_.set (x);
}

void checkpoint::
checkpoint_file (const checkpoint_file_optional& x)
{
  this->checkpoint_file_ = x;
}

void checkpoint::
checkpoint_file (::std::unique_ptr< checkpoint_file_type > x)
{
  this->checkpoint_file_.set (std::move (x));
}

const checkpoint::merge_file_optional& checkpoint::
merge_file () const
{
  return this->merge_file_;
}

checkpoint::merge_file_optional& checkpoint::
merge_file ()
{
  return this->merge_file_;
}

void checkpoint::
merge_file (const merge_file_type& x)
{
  this->merge_file_.set (x);
}

void checkpoint::
merge_file (const merge_file_optional& x)
{
  this->merge_file_ = x;
}

void checkpoint::
merge_file (::std::unique_ptr< merge_file_type > x)
{
  this->merge_file_.set (std::move (x));
}


// cuboid
// 

const cuboid::position_type& cuboid::
position () const
{
  return this->position_.get ();
}

cuboid::position_type& cuboid::
position ()
{
  return this->position_.get ();
}

void cuboid::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid::dimensions_type& cuboid::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboid::dimensions_type& cuboid::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboid::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboid::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}

const cuboid::distance_type& cuboid::
distance () const
{
  return this->distance_.get ();
}

cuboid::distance_type& cuboid::
distance ()
{
  return this->distance_.get ();
}

void cuboid::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid::brownian_motion_type& cuboid::
brownian_motion () const
{
  return this->brownian_motion_.get ();
}

cuboid::brownian_motion_type& cuboid::
brownian_motion ()
{
  return this->brownian_motion_.get ();
}

void cuboid::
brownian_motion (const brownian_motion_type& x)
{
  this->brownian_motion_.set (x);
}

const cuboid::epsilon_type& cuboid::
epsilon () const
{
  return this->epsilon_.get ();
}

cuboid::epsilon_type& cuboid::
epsilon ()
{
  return this->epsilon_.get ();
}

void cuboid::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const cuboid::sigma_type& cuboid::
sigma () const
{
  return this->sigma_.get ();
}

cuboid::sigma_type& cuboid::
sigma ()
{
  return this->sigma_.get ();
}

void cuboid::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const cuboid::brownian_motion_dimension_type& cuboid::
brownian_motion_dimension () const
{
  return this->brownian_motion_dimension_.get ();
}

cuboid::brownian_motion_dimension_type& cuboid::
brownian_motion_dimension ()
{
  return this->brownian_motion_dimension_.get ();
}

void cuboid::
brownian_motion_dimension (const brownian_motion_dimension_type& x)
{
  this->brownian_motion_dimension_.set (x);
}

const cuboid::type_type& cuboid::
type () const
{
  return this->type_.get ();
}

cuboid::type_type& cuboid::
type ()
{
  return this->type_.get ();
}

void cuboid::
type (const type_type& x)
{
  this->type_.set (x);
}


// disc
// 

const disc::position_type& disc::
position () const
{
  return this->position_.get ();
}

disc::position_type& disc::
position ()
{
  return this->position_.get ();
}

void disc::
position (const position_type& x)
{
  this->position_.set (x);
}

void disc::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const disc::velocity_type& disc::
velocity () const
{
  return this->velocity_.get ();
}

disc::velocity_type& disc::
velocity ()
{
  return this->velocity_.get ();
}

void disc::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void disc::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const disc::radius_type& disc::
radius () const
{
  return this->radius_.get ();
}

disc::radius_type& disc::
radius ()
{
  return this->radius_.get ();
}

void disc::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

const disc::distance_type& disc::
distance () const
{
  return this->distance_.get ();
}

disc::distance_type& disc::
distance ()
{
  return this->distance_.get ();
}

void disc::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const disc::mass_type& disc::
mass () const
{
  return this->mass_.get ();
}

disc::mass_type& disc::
mass ()
{
  return this->mass_.get ();
}

void disc::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const disc::epsilon_type& disc::
epsilon () const
{
  return this->epsilon_.get ();
}

disc::epsilon_type& disc::
epsilon ()
{
  return this->epsilon_.get ();
}

void disc::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const disc::sigma_type& disc::
sigma () const
{
  return this->sigma_.get ();
}

disc::sigma_type& disc::
sigma ()
{
  return this->sigma_.get ();
}

void disc::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const disc::brownian_motion_dimension_type& disc::
brownian_motion_dimension () const
{
  return this->brownian_motion_dimension_.get ();
}

disc::brownian_motion_dimension_type& disc::
brownian_motion_dimension ()
{
  return this->brownian_motion_dimension_.get ();
}

void disc::
brownian_motion_dimension (const brownian_motion_dimension_type& x)
{
  this->brownian_motion_dimension_.set (x);
}

const disc::type_type& disc::
type () const
{
  return this->type_.get ();
}

disc::type_type& disc::
type ()
{
  return this->type_.get ();
}

void disc::
type (const type_type& x)
{
  this->type_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// double_vector
//

double_vector::
double_vector (const x_type& x,
               const y_type& y,
               const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

double_vector::
double_vector (const double_vector& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

double_vector::
double_vector (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void double_vector::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

double_vector* double_vector::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class double_vector (*this, f, c);
}

double_vector& double_vector::
operator= (const double_vector& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

double_vector::
~double_vector ()
{
}

// unsigned_vector
//

unsigned_vector::
unsigned_vector (const x_type& x,
                 const y_type& y,
                 const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

unsigned_vector::
unsigned_vector (const unsigned_vector& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

unsigned_vector::
unsigned_vector (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void unsigned_vector::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

unsigned_vector* unsigned_vector::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class unsigned_vector (*this, f, c);
}

unsigned_vector& unsigned_vector::
operator= (const unsigned_vector& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

unsigned_vector::
~unsigned_vector ()
{
}

// boundaryBehavior
//

boundaryBehavior::
boundaryBehavior (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_boundaryBehavior_convert ();
}

boundaryBehavior::
boundaryBehavior (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_boundaryBehavior_convert ();
}

boundaryBehavior::
boundaryBehavior (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_boundaryBehavior_convert ();
}

boundaryBehavior* boundaryBehavior::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundaryBehavior (*this, f, c);
}

boundaryBehavior::value boundaryBehavior::
_xsd_boundaryBehavior_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_boundaryBehavior_literals_);
  const value* i (::std::lower_bound (
                    _xsd_boundaryBehavior_indexes_,
                    _xsd_boundaryBehavior_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_boundaryBehavior_indexes_ + 4 || _xsd_boundaryBehavior_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const boundaryBehavior::
_xsd_boundaryBehavior_literals_[4] =
{
  "outflow",
  "mirror",
  "reflecting",
  "periodic"
};

const boundaryBehavior::value boundaryBehavior::
_xsd_boundaryBehavior_indexes_[4] =
{
  ::boundaryBehavior::mirror,
  ::boundaryBehavior::outflow,
  ::boundaryBehavior::periodic,
  ::boundaryBehavior::reflecting
};

// forces
//

forces::
forces (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_forces_convert ();
}

forces::
forces (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_forces_convert ();
}

forces::
forces (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_forces_convert ();
}

forces* forces::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class forces (*this, f, c);
}

forces::value forces::
_xsd_forces_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_forces_literals_);
  const value* i (::std::lower_bound (
                    _xsd_forces_indexes_,
                    _xsd_forces_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_forces_indexes_ + 2 || _xsd_forces_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const forces::
_xsd_forces_literals_[2] =
{
  "gravitationalForce",
  "lennardJonesForce"
};

const forces::value forces::
_xsd_forces_indexes_[2] =
{
  ::forces::gravitationalForce,
  ::forces::lennardJonesForce
};

// algorithms
//

algorithms::
algorithms (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_algorithms_convert ();
}

algorithms::
algorithms (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_algorithms_convert ();
}

algorithms::
algorithms (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_algorithms_convert ();
}

algorithms* algorithms::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class algorithms (*this, f, c);
}

algorithms::value algorithms::
_xsd_algorithms_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_algorithms_literals_);
  const value* i (::std::lower_bound (
                    _xsd_algorithms_indexes_,
                    _xsd_algorithms_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_algorithms_indexes_ + 2 || _xsd_algorithms_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const algorithms::
_xsd_algorithms_literals_[2] =
{
  "linkedcell",
  "default"
};

const algorithms::value algorithms::
_xsd_algorithms_indexes_[2] =
{
  ::algorithms::default_,
  ::algorithms::linkedcell
};

// loglevels
//

loglevels::
loglevels (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_loglevels_convert ();
}

loglevels::
loglevels (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_loglevels_convert ();
}

loglevels::
loglevels (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_loglevels_convert ();
}

loglevels* loglevels::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class loglevels (*this, f, c);
}

loglevels::value loglevels::
_xsd_loglevels_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_loglevels_literals_);
  const value* i (::std::lower_bound (
                    _xsd_loglevels_indexes_,
                    _xsd_loglevels_indexes_ + 6,
                    *this,
                    c));

  if (i == _xsd_loglevels_indexes_ + 6 || _xsd_loglevels_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const loglevels::
_xsd_loglevels_literals_[6] =
{
  "OFF",
  "ERROR",
  "WARN",
  "INFO",
  "DEBUG",
  "TRACE"
};

const loglevels::value loglevels::
_xsd_loglevels_indexes_[6] =
{
  ::loglevels::DEBUG,
  ::loglevels::ERROR,
  ::loglevels::INFO,
  ::loglevels::OFF,
  ::loglevels::TRACE,
  ::loglevels::WARN
};

// simulation
//

simulation::
simulation (const boundaries_type& boundaries,
            const inputSettings_type& inputSettings,
            const outputSettings_type& outputSettings,
            const simulationParameters_type& simulationParameters)
: ::xml_schema::type (),
  boundaries_ (boundaries, this),
  inputSettings_ (inputSettings, this),
  outputSettings_ (outputSettings, this),
  simulationParameters_ (simulationParameters, this),
  thermostat_ (this),
  checkpoint_ (this),
  cuboid_ (this),
  disc_ (this)
{
}

simulation::
simulation (::std::unique_ptr< boundaries_type > boundaries,
            ::std::unique_ptr< inputSettings_type > inputSettings,
            ::std::unique_ptr< outputSettings_type > outputSettings,
            ::std::unique_ptr< simulationParameters_type > simulationParameters)
: ::xml_schema::type (),
  boundaries_ (std::move (boundaries), this),
  inputSettings_ (std::move (inputSettings), this),
  outputSettings_ (std::move (outputSettings), this),
  simulationParameters_ (std::move (simulationParameters), this),
  thermostat_ (this),
  checkpoint_ (this),
  cuboid_ (this),
  disc_ (this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  boundaries_ (x.boundaries_, f, this),
  inputSettings_ (x.inputSettings_, f, this),
  outputSettings_ (x.outputSettings_, f, this),
  simulationParameters_ (x.simulationParameters_, f, this),
  thermostat_ (x.thermostat_, f, this),
  checkpoint_ (x.checkpoint_, f, this),
  cuboid_ (x.cuboid_, f, this),
  disc_ (x.disc_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  boundaries_ (this),
  inputSettings_ (this),
  outputSettings_ (this),
  simulationParameters_ (this),
  thermostat_ (this),
  checkpoint_ (this),
  cuboid_ (this),
  disc_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // boundaries
    //
    if (n.name () == "boundaries" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< boundaries_type > r (
        boundaries_traits::create (i, f, this));

      if (!boundaries_.present ())
      {
        this->boundaries_.set (::std::move (r));
        continue;
      }
    }

    // inputSettings
    //
    if (n.name () == "inputSettings" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< inputSettings_type > r (
        inputSettings_traits::create (i, f, this));

      if (!inputSettings_.present ())
      {
        this->inputSettings_.set (::std::move (r));
        continue;
      }
    }

    // outputSettings
    //
    if (n.name () == "outputSettings" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< outputSettings_type > r (
        outputSettings_traits::create (i, f, this));

      if (!outputSettings_.present ())
      {
        this->outputSettings_.set (::std::move (r));
        continue;
      }
    }

    // simulationParameters
    //
    if (n.name () == "simulationParameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< simulationParameters_type > r (
        simulationParameters_traits::create (i, f, this));

      if (!simulationParameters_.present ())
      {
        this->simulationParameters_.set (::std::move (r));
        continue;
      }
    }

    // thermostat
    //
    if (n.name () == "thermostat" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< thermostat_type > r (
        thermostat_traits::create (i, f, this));

      if (!this->thermostat_)
      {
        this->thermostat_.set (::std::move (r));
        continue;
      }
    }

    // checkpoint
    //
    if (n.name () == "checkpoint" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< checkpoint_type > r (
        checkpoint_traits::create (i, f, this));

      if (!this->checkpoint_)
      {
        this->checkpoint_.set (::std::move (r));
        continue;
      }
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    // disc
    //
    if (n.name () == "disc" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< disc_type > r (
        disc_traits::create (i, f, this));

      this->disc_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!boundaries_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "boundaries",
      "");
  }

  if (!inputSettings_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "inputSettings",
      "");
  }

  if (!outputSettings_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "outputSettings",
      "");
  }

  if (!simulationParameters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulationParameters",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->boundaries_ = x.boundaries_;
    this->inputSettings_ = x.inputSettings_;
    this->outputSettings_ = x.outputSettings_;
    this->simulationParameters_ = x.simulationParameters_;
    this->thermostat_ = x.thermostat_;
    this->checkpoint_ = x.checkpoint_;
    this->cuboid_ = x.cuboid_;
    this->disc_ = x.disc_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

// boundaries
//

boundaries::
boundaries (const left_type& left,
            const right_type& right,
            const bottom_type& bottom,
            const top_type& top,
            const rear_type& rear,
            const front_type& front)
: ::xml_schema::type (),
  left_ (left, this),
  right_ (right, this),
  bottom_ (bottom, this),
  top_ (top, this),
  rear_ (rear, this),
  front_ (front, this)
{
}

boundaries::
boundaries (const boundaries& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  left_ (x.left_, f, this),
  right_ (x.right_, f, this),
  bottom_ (x.bottom_, f, this),
  top_ (x.top_, f, this),
  rear_ (x.rear_, f, this),
  front_ (x.front_, f, this)
{
}

boundaries::
boundaries (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  left_ (this),
  right_ (this),
  bottom_ (this),
  top_ (this),
  rear_ (this),
  front_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void boundaries::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // left
    //
    if (n.name () == "left" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< left_type > r (
        left_traits::create (i, f, this));

      if (!left_.present ())
      {
        this->left_.set (::std::move (r));
        continue;
      }
    }

    // right
    //
    if (n.name () == "right" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< right_type > r (
        right_traits::create (i, f, this));

      if (!right_.present ())
      {
        this->right_.set (::std::move (r));
        continue;
      }
    }

    // bottom
    //
    if (n.name () == "bottom" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< bottom_type > r (
        bottom_traits::create (i, f, this));

      if (!bottom_.present ())
      {
        this->bottom_.set (::std::move (r));
        continue;
      }
    }

    // top
    //
    if (n.name () == "top" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< top_type > r (
        top_traits::create (i, f, this));

      if (!top_.present ())
      {
        this->top_.set (::std::move (r));
        continue;
      }
    }

    // rear
    //
    if (n.name () == "rear" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< rear_type > r (
        rear_traits::create (i, f, this));

      if (!rear_.present ())
      {
        this->rear_.set (::std::move (r));
        continue;
      }
    }

    // front
    //
    if (n.name () == "front" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< front_type > r (
        front_traits::create (i, f, this));

      if (!front_.present ())
      {
        this->front_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!left_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "left",
      "");
  }

  if (!right_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "right",
      "");
  }

  if (!bottom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bottom",
      "");
  }

  if (!top_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "top",
      "");
  }

  if (!rear_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "rear",
      "");
  }

  if (!front_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "front",
      "");
  }
}

boundaries* boundaries::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundaries (*this, f, c);
}

boundaries& boundaries::
operator= (const boundaries& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->left_ = x.left_;
    this->right_ = x.right_;
    this->bottom_ = x.bottom_;
    this->top_ = x.top_;
    this->rear_ = x.rear_;
    this->front_ = x.front_;
  }

  return *this;
}

boundaries::
~boundaries ()
{
}

// inputSettings
//

inputSettings::
inputSettings (const inputFile_type& inputFile)
: ::xml_schema::type (),
  inputFile_ (inputFile, this)
{
}

inputSettings::
inputSettings (const inputSettings& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  inputFile_ (x.inputFile_, f, this)
{
}

inputSettings::
inputSettings (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  inputFile_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void inputSettings::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // inputFile
    //
    if (n.name () == "inputFile" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< inputFile_type > r (
        inputFile_traits::create (i, f, this));

      if (!inputFile_.present ())
      {
        this->inputFile_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!inputFile_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "inputFile",
      "");
  }
}

inputSettings* inputSettings::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class inputSettings (*this, f, c);
}

inputSettings& inputSettings::
operator= (const inputSettings& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->inputFile_ = x.inputFile_;
  }

  return *this;
}

inputSettings::
~inputSettings ()
{
}

// outputSettings
//

outputSettings::
outputSettings (const baseName_type& baseName,
                const writeFrequency_type& writeFrequency)
: ::xml_schema::type (),
  baseName_ (baseName, this),
  writeFrequency_ (writeFrequency, this)
{
}

outputSettings::
outputSettings (const outputSettings& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  baseName_ (x.baseName_, f, this),
  writeFrequency_ (x.writeFrequency_, f, this)
{
}

outputSettings::
outputSettings (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  baseName_ (this),
  writeFrequency_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void outputSettings::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // baseName
    //
    if (n.name () == "baseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< baseName_type > r (
        baseName_traits::create (i, f, this));

      if (!baseName_.present ())
      {
        this->baseName_.set (::std::move (r));
        continue;
      }
    }

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!writeFrequency_.present ())
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!baseName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseName",
      "");
  }

  if (!writeFrequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "writeFrequency",
      "");
  }
}

outputSettings* outputSettings::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class outputSettings (*this, f, c);
}

outputSettings& outputSettings::
operator= (const outputSettings& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->baseName_ = x.baseName_;
    this->writeFrequency_ = x.writeFrequency_;
  }

  return *this;
}

outputSettings::
~outputSettings ()
{
}

// simulationParameters
//

simulationParameters::
simulationParameters (const end_t_type& end_t,
                      const delta_t_type& delta_t,
                      const start_t_type& start_t,
                      const force_type& force,
                      const algorithm_type& algorithm,
                      const loglevel_type& loglevel,
                      const domain_type& domain,
                      const domain_start_type& domain_start,
                      const cutoff_radius_type& cutoff_radius,
                      const grav_constant_type& grav_constant)
: ::xml_schema::type (),
  end_t_ (end_t, this),
  delta_t_ (delta_t, this),
  start_t_ (start_t, this),
  force_ (force, this),
  algorithm_ (algorithm, this),
  loglevel_ (loglevel, this),
  domain_ (domain, this),
  domain_start_ (domain_start, this),
  cutoff_radius_ (cutoff_radius, this),
  grav_constant_ (grav_constant, this)
{
}

simulationParameters::
simulationParameters (const end_t_type& end_t,
                      const delta_t_type& delta_t,
                      const start_t_type& start_t,
                      const force_type& force,
                      const algorithm_type& algorithm,
                      const loglevel_type& loglevel,
                      ::std::unique_ptr< domain_type > domain,
                      ::std::unique_ptr< domain_start_type > domain_start,
                      const cutoff_radius_type& cutoff_radius,
                      const grav_constant_type& grav_constant)
: ::xml_schema::type (),
  end_t_ (end_t, this),
  delta_t_ (delta_t, this),
  start_t_ (start_t, this),
  force_ (force, this),
  algorithm_ (algorithm, this),
  loglevel_ (loglevel, this),
  domain_ (std::move (domain), this),
  domain_start_ (std::move (domain_start), this),
  cutoff_radius_ (cutoff_radius, this),
  grav_constant_ (grav_constant, this)
{
}

simulationParameters::
simulationParameters (const simulationParameters& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  end_t_ (x.end_t_, f, this),
  delta_t_ (x.delta_t_, f, this),
  start_t_ (x.start_t_, f, this),
  force_ (x.force_, f, this),
  algorithm_ (x.algorithm_, f, this),
  loglevel_ (x.loglevel_, f, this),
  domain_ (x.domain_, f, this),
  domain_start_ (x.domain_start_, f, this),
  cutoff_radius_ (x.cutoff_radius_, f, this),
  grav_constant_ (x.grav_constant_, f, this)
{
}

simulationParameters::
simulationParameters (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  end_t_ (this),
  delta_t_ (this),
  start_t_ (this),
  force_ (this),
  algorithm_ (this),
  loglevel_ (this),
  domain_ (this),
  domain_start_ (this),
  cutoff_radius_ (this),
  grav_constant_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulationParameters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // end_t
    //
    if (n.name () == "end_t" && n.namespace_ ().empty ())
    {
      if (!end_t_.present ())
      {
        this->end_t_.set (end_t_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // start_t
    //
    if (n.name () == "start_t" && n.namespace_ ().empty ())
    {
      if (!start_t_.present ())
      {
        this->start_t_.set (start_t_traits::create (i, f, this));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!force_.present ())
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // algorithm
    //
    if (n.name () == "algorithm" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< algorithm_type > r (
        algorithm_traits::create (i, f, this));

      if (!algorithm_.present ())
      {
        this->algorithm_.set (::std::move (r));
        continue;
      }
    }

    // loglevel
    //
    if (n.name () == "loglevel" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loglevel_type > r (
        loglevel_traits::create (i, f, this));

      if (!loglevel_.present ())
      {
        this->loglevel_.set (::std::move (r));
        continue;
      }
    }

    // domain
    //
    if (n.name () == "domain" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< domain_type > r (
        domain_traits::create (i, f, this));

      if (!domain_.present ())
      {
        this->domain_.set (::std::move (r));
        continue;
      }
    }

    // domain_start
    //
    if (n.name () == "domain_start" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< domain_start_type > r (
        domain_start_traits::create (i, f, this));

      if (!domain_start_.present ())
      {
        this->domain_start_.set (::std::move (r));
        continue;
      }
    }

    // cutoff_radius
    //
    if (n.name () == "cutoff_radius" && n.namespace_ ().empty ())
    {
      if (!cutoff_radius_.present ())
      {
        this->cutoff_radius_.set (cutoff_radius_traits::create (i, f, this));
        continue;
      }
    }

    // grav_constant
    //
    if (n.name () == "grav_constant" && n.namespace_ ().empty ())
    {
      if (!grav_constant_.present ())
      {
        this->grav_constant_.set (grav_constant_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!end_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "end_t",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!start_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start_t",
      "");
  }

  if (!force_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "force",
      "");
  }

  if (!algorithm_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "algorithm",
      "");
  }

  if (!loglevel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "loglevel",
      "");
  }

  if (!domain_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domain",
      "");
  }

  if (!domain_start_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domain_start",
      "");
  }

  if (!cutoff_radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cutoff_radius",
      "");
  }

  if (!grav_constant_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "grav_constant",
      "");
  }
}

simulationParameters* simulationParameters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulationParameters (*this, f, c);
}

simulationParameters& simulationParameters::
operator= (const simulationParameters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->end_t_ = x.end_t_;
    this->delta_t_ = x.delta_t_;
    this->start_t_ = x.start_t_;
    this->force_ = x.force_;
    this->algorithm_ = x.algorithm_;
    this->loglevel_ = x.loglevel_;
    this->domain_ = x.domain_;
    this->domain_start_ = x.domain_start_;
    this->cutoff_radius_ = x.cutoff_radius_;
    this->grav_constant_ = x.grav_constant_;
  }

  return *this;
}

simulationParameters::
~simulationParameters ()
{
}

// thermostat
//

thermostat::
thermostat (const n_thermostat_type& n_thermostat,
            const brownian_motion_dimension_type& brownian_motion_dimension)
: ::xml_schema::type (),
  T_init_ (this),
  T_target_ (this),
  T_diff_ (this),
  n_thermostat_ (n_thermostat, this),
  brownian_motion_dimension_ (brownian_motion_dimension, this)
{
}

thermostat::
thermostat (const thermostat& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  T_init_ (x.T_init_, f, this),
  T_target_ (x.T_target_, f, this),
  T_diff_ (x.T_diff_, f, this),
  n_thermostat_ (x.n_thermostat_, f, this),
  brownian_motion_dimension_ (x.brownian_motion_dimension_, f, this)
{
}

thermostat::
thermostat (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  T_init_ (this),
  T_target_ (this),
  T_diff_ (this),
  n_thermostat_ (this),
  brownian_motion_dimension_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void thermostat::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // T_init
    //
    if (n.name () == "T_init" && n.namespace_ ().empty ())
    {
      if (!this->T_init_)
      {
        this->T_init_.set (T_init_traits::create (i, f, this));
        continue;
      }
    }

    // T_target
    //
    if (n.name () == "T_target" && n.namespace_ ().empty ())
    {
      if (!this->T_target_)
      {
        this->T_target_.set (T_target_traits::create (i, f, this));
        continue;
      }
    }

    // T_diff
    //
    if (n.name () == "T_diff" && n.namespace_ ().empty ())
    {
      if (!this->T_diff_)
      {
        this->T_diff_.set (T_diff_traits::create (i, f, this));
        continue;
      }
    }

    // n_thermostat
    //
    if (n.name () == "n_thermostat" && n.namespace_ ().empty ())
    {
      if (!n_thermostat_.present ())
      {
        this->n_thermostat_.set (n_thermostat_traits::create (i, f, this));
        continue;
      }
    }

    // brownian_motion_dimension
    //
    if (n.name () == "brownian_motion_dimension" && n.namespace_ ().empty ())
    {
      if (!brownian_motion_dimension_.present ())
      {
        this->brownian_motion_dimension_.set (brownian_motion_dimension_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!n_thermostat_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "n_thermostat",
      "");
  }

  if (!brownian_motion_dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownian_motion_dimension",
      "");
  }
}

thermostat* thermostat::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class thermostat (*this, f, c);
}

thermostat& thermostat::
operator= (const thermostat& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->T_init_ = x.T_init_;
    this->T_target_ = x.T_target_;
    this->T_diff_ = x.T_diff_;
    this->n_thermostat_ = x.n_thermostat_;
    this->brownian_motion_dimension_ = x.brownian_motion_dimension_;
  }

  return *this;
}

thermostat::
~thermostat ()
{
}

// checkpoint
//

checkpoint::
checkpoint ()
: ::xml_schema::type (),
  checkpoint_file_ (this),
  merge_file_ (this)
{
}

checkpoint::
checkpoint (const checkpoint& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  checkpoint_file_ (x.checkpoint_file_, f, this),
  merge_file_ (x.merge_file_, f, this)
{
}

checkpoint::
checkpoint (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  checkpoint_file_ (this),
  merge_file_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void checkpoint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // checkpoint_file
    //
    if (n.name () == "checkpoint_file" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< checkpoint_file_type > r (
        checkpoint_file_traits::create (i, f, this));

      if (!this->checkpoint_file_)
      {
        this->checkpoint_file_.set (::std::move (r));
        continue;
      }
    }

    // merge_file
    //
    if (n.name () == "merge_file" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< merge_file_type > r (
        merge_file_traits::create (i, f, this));

      if (!this->merge_file_)
      {
        this->merge_file_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

checkpoint* checkpoint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class checkpoint (*this, f, c);
}

checkpoint& checkpoint::
operator= (const checkpoint& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->checkpoint_file_ = x.checkpoint_file_;
    this->merge_file_ = x.merge_file_;
  }

  return *this;
}

checkpoint::
~checkpoint ()
{
}

// cuboid
//

cuboid::
cuboid (const position_type& position,
        const velocity_type& velocity,
        const dimensions_type& dimensions,
        const distance_type& distance,
        const mass_type& mass,
        const brownian_motion_type& brownian_motion,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const brownian_motion_dimension_type& brownian_motion_dimension,
        const type_type& type)
: ::xml_schema::type (),
  position_ (position, this),
  velocity_ (velocity, this),
  dimensions_ (dimensions, this),
  distance_ (distance, this),
  mass_ (mass, this),
  brownian_motion_ (brownian_motion, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  brownian_motion_dimension_ (brownian_motion_dimension, this),
  type_ (type, this)
{
}

cuboid::
cuboid (::std::unique_ptr< position_type > position,
        ::std::unique_ptr< velocity_type > velocity,
        ::std::unique_ptr< dimensions_type > dimensions,
        const distance_type& distance,
        const mass_type& mass,
        const brownian_motion_type& brownian_motion,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const brownian_motion_dimension_type& brownian_motion_dimension,
        const type_type& type)
: ::xml_schema::type (),
  position_ (std::move (position), this),
  velocity_ (std::move (velocity), this),
  dimensions_ (std::move (dimensions), this),
  distance_ (distance, this),
  mass_ (mass, this),
  brownian_motion_ (brownian_motion, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  brownian_motion_dimension_ (brownian_motion_dimension, this),
  type_ (type, this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  dimensions_ (x.dimensions_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  brownian_motion_ (x.brownian_motion_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  brownian_motion_dimension_ (x.brownian_motion_dimension_, f, this),
  type_ (x.type_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  velocity_ (this),
  dimensions_ (this),
  distance_ (this),
  mass_ (this),
  brownian_motion_ (this),
  epsilon_ (this),
  sigma_ (this),
  brownian_motion_dimension_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // brownian_motion
    //
    if (n.name () == "brownian_motion" && n.namespace_ ().empty ())
    {
      if (!brownian_motion_.present ())
      {
        this->brownian_motion_.set (brownian_motion_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // brownian_motion_dimension
    //
    if (n.name () == "brownian_motion_dimension" && n.namespace_ ().empty ())
    {
      if (!brownian_motion_dimension_.present ())
      {
        this->brownian_motion_dimension_.set (brownian_motion_dimension_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!brownian_motion_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownian_motion",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!brownian_motion_dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownian_motion_dimension",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->velocity_ = x.velocity_;
    this->dimensions_ = x.dimensions_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->brownian_motion_ = x.brownian_motion_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->brownian_motion_dimension_ = x.brownian_motion_dimension_;
    this->type_ = x.type_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

// disc
//

disc::
disc (const position_type& position,
      const velocity_type& velocity,
      const radius_type& radius,
      const distance_type& distance,
      const mass_type& mass,
      const epsilon_type& epsilon,
      const sigma_type& sigma,
      const brownian_motion_dimension_type& brownian_motion_dimension,
      const type_type& type)
: ::xml_schema::type (),
  position_ (position, this),
  velocity_ (velocity, this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  brownian_motion_dimension_ (brownian_motion_dimension, this),
  type_ (type, this)
{
}

disc::
disc (::std::unique_ptr< position_type > position,
      ::std::unique_ptr< velocity_type > velocity,
      const radius_type& radius,
      const distance_type& distance,
      const mass_type& mass,
      const epsilon_type& epsilon,
      const sigma_type& sigma,
      const brownian_motion_dimension_type& brownian_motion_dimension,
      const type_type& type)
: ::xml_schema::type (),
  position_ (std::move (position), this),
  velocity_ (std::move (velocity), this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  brownian_motion_dimension_ (brownian_motion_dimension, this),
  type_ (type, this)
{
}

disc::
disc (const disc& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  radius_ (x.radius_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  brownian_motion_dimension_ (x.brownian_motion_dimension_, f, this),
  type_ (x.type_, f, this)
{
}

disc::
disc (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  velocity_ (this),
  radius_ (this),
  distance_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  brownian_motion_dimension_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void disc::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // brownian_motion_dimension
    //
    if (n.name () == "brownian_motion_dimension" && n.namespace_ ().empty ())
    {
      if (!brownian_motion_dimension_.present ())
      {
        this->brownian_motion_dimension_.set (brownian_motion_dimension_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!brownian_motion_dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownian_motion_dimension",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

disc* disc::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class disc (*this, f, c);
}

disc& disc::
operator= (const disc& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->velocity_ = x.velocity_;
    this->radius_ = x.radius_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->brownian_motion_dimension_ = x.brownian_motion_dimension_;
    this->type_ = x.type_;
  }

  return *this;
}

disc::
~disc ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation > (
      ::simulation_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

