// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "XMLFormat.h"

// double_vector
// 

const double_vector::x_type& double_vector::
x () const
{
  return this->x_.get ();
}

double_vector::x_type& double_vector::
x ()
{
  return this->x_.get ();
}

void double_vector::
x (const x_type& x)
{
  this->x_.set (x);
}

const double_vector::y_type& double_vector::
y () const
{
  return this->y_.get ();
}

double_vector::y_type& double_vector::
y ()
{
  return this->y_.get ();
}

void double_vector::
y (const y_type& x)
{
  this->y_.set (x);
}

const double_vector::z_type& double_vector::
z () const
{
  return this->z_.get ();
}

double_vector::z_type& double_vector::
z ()
{
  return this->z_.get ();
}

void double_vector::
z (const z_type& x)
{
  this->z_.set (x);
}


// unsigned_vector
// 

const unsigned_vector::x_type& unsigned_vector::
x () const
{
  return this->x_.get ();
}

unsigned_vector::x_type& unsigned_vector::
x ()
{
  return this->x_.get ();
}

void unsigned_vector::
x (const x_type& x)
{
  this->x_.set (x);
}

const unsigned_vector::y_type& unsigned_vector::
y () const
{
  return this->y_.get ();
}

unsigned_vector::y_type& unsigned_vector::
y ()
{
  return this->y_.get ();
}

void unsigned_vector::
y (const y_type& x)
{
  this->y_.set (x);
}

const unsigned_vector::z_type& unsigned_vector::
z () const
{
  return this->z_.get ();
}

unsigned_vector::z_type& unsigned_vector::
z ()
{
  return this->z_.get ();
}

void unsigned_vector::
z (const z_type& x)
{
  this->z_.set (x);
}


// simulation
// 

const simulation::outputSettings_type& simulation::
outputSettings () const
{
  return this->outputSettings_.get ();
}

simulation::outputSettings_type& simulation::
outputSettings ()
{
  return this->outputSettings_.get ();
}

void simulation::
outputSettings (const outputSettings_type& x)
{
  this->outputSettings_.set (x);
}

void simulation::
outputSettings (::std::unique_ptr< outputSettings_type > x)
{
  this->outputSettings_.set (std::move (x));
}

const simulation::simulationParameters_type& simulation::
simulationParameters () const
{
  return this->simulationParameters_.get ();
}

simulation::simulationParameters_type& simulation::
simulationParameters ()
{
  return this->simulationParameters_.get ();
}

void simulation::
simulationParameters (const simulationParameters_type& x)
{
  this->simulationParameters_.set (x);
}

void simulation::
simulationParameters (::std::unique_ptr< simulationParameters_type > x)
{
  this->simulationParameters_.set (std::move (x));
}

const simulation::cuboid_sequence& simulation::
cuboid () const
{
  return this->cuboid_;
}

simulation::cuboid_sequence& simulation::
cuboid ()
{
  return this->cuboid_;
}

void simulation::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


// outputSettings
// 

const outputSettings::baseName_type& outputSettings::
baseName () const
{
  return this->baseName_.get ();
}

outputSettings::baseName_type& outputSettings::
baseName ()
{
  return this->baseName_.get ();
}

void outputSettings::
baseName (const baseName_type& x)
{
  this->baseName_.set (x);
}

void outputSettings::
baseName (::std::unique_ptr< baseName_type > x)
{
  this->baseName_.set (std::move (x));
}

const outputSettings::writeFrequency_type& outputSettings::
writeFrequency () const
{
  return this->writeFrequency_.get ();
}

outputSettings::writeFrequency_type& outputSettings::
writeFrequency ()
{
  return this->writeFrequency_.get ();
}

void outputSettings::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}


// simulationParameters
// 

const simulationParameters::end_t_type& simulationParameters::
end_t () const
{
  return this->end_t_.get ();
}

simulationParameters::end_t_type& simulationParameters::
end_t ()
{
  return this->end_t_.get ();
}

void simulationParameters::
end_t (const end_t_type& x)
{
  this->end_t_.set (x);
}

const simulationParameters::delta_t_type& simulationParameters::
delta_t () const
{
  return this->delta_t_.get ();
}

simulationParameters::delta_t_type& simulationParameters::
delta_t ()
{
  return this->delta_t_.get ();
}

void simulationParameters::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const simulationParameters::start_t_type& simulationParameters::
start_t () const
{
  return this->start_t_.get ();
}

simulationParameters::start_t_type& simulationParameters::
start_t ()
{
  return this->start_t_.get ();
}

void simulationParameters::
start_t (const start_t_type& x)
{
  this->start_t_.set (x);
}


// cuboid
// 

const cuboid::position_type& cuboid::
position () const
{
  return this->position_.get ();
}

cuboid::position_type& cuboid::
position ()
{
  return this->position_.get ();
}

void cuboid::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid::dimensions_type& cuboid::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboid::dimensions_type& cuboid::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboid::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboid::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}

const cuboid::distance_type& cuboid::
distance () const
{
  return this->distance_.get ();
}

cuboid::distance_type& cuboid::
distance ()
{
  return this->distance_.get ();
}

void cuboid::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// double_vector
//

double_vector::
double_vector (const x_type& x,
               const y_type& y,
               const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

double_vector::
double_vector (const double_vector& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

double_vector::
double_vector (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void double_vector::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

double_vector* double_vector::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class double_vector (*this, f, c);
}

double_vector& double_vector::
operator= (const double_vector& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

double_vector::
~double_vector ()
{
}

// unsigned_vector
//

unsigned_vector::
unsigned_vector (const x_type& x,
                 const y_type& y,
                 const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

unsigned_vector::
unsigned_vector (const unsigned_vector& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

unsigned_vector::
unsigned_vector (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void unsigned_vector::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

unsigned_vector* unsigned_vector::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class unsigned_vector (*this, f, c);
}

unsigned_vector& unsigned_vector::
operator= (const unsigned_vector& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

unsigned_vector::
~unsigned_vector ()
{
}

// simulation
//

simulation::
simulation (const outputSettings_type& outputSettings,
            const simulationParameters_type& simulationParameters)
: ::xml_schema::type (),
  outputSettings_ (outputSettings, this),
  simulationParameters_ (simulationParameters, this),
  cuboid_ (this)
{
}

simulation::
simulation (::std::unique_ptr< outputSettings_type > outputSettings,
            ::std::unique_ptr< simulationParameters_type > simulationParameters)
: ::xml_schema::type (),
  outputSettings_ (std::move (outputSettings), this),
  simulationParameters_ (std::move (simulationParameters), this),
  cuboid_ (this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  outputSettings_ (x.outputSettings_, f, this),
  simulationParameters_ (x.simulationParameters_, f, this),
  cuboid_ (x.cuboid_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  outputSettings_ (this),
  simulationParameters_ (this),
  cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // outputSettings
    //
    if (n.name () == "outputSettings" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< outputSettings_type > r (
        outputSettings_traits::create (i, f, this));

      if (!outputSettings_.present ())
      {
        this->outputSettings_.set (::std::move (r));
        continue;
      }
    }

    // simulationParameters
    //
    if (n.name () == "simulationParameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< simulationParameters_type > r (
        simulationParameters_traits::create (i, f, this));

      if (!simulationParameters_.present ())
      {
        this->simulationParameters_.set (::std::move (r));
        continue;
      }
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!outputSettings_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "outputSettings",
      "");
  }

  if (!simulationParameters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulationParameters",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->outputSettings_ = x.outputSettings_;
    this->simulationParameters_ = x.simulationParameters_;
    this->cuboid_ = x.cuboid_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

// outputSettings
//

outputSettings::
outputSettings (const baseName_type& baseName,
                const writeFrequency_type& writeFrequency)
: ::xml_schema::type (),
  baseName_ (baseName, this),
  writeFrequency_ (writeFrequency, this)
{
}

outputSettings::
outputSettings (const outputSettings& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  baseName_ (x.baseName_, f, this),
  writeFrequency_ (x.writeFrequency_, f, this)
{
}

outputSettings::
outputSettings (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  baseName_ (this),
  writeFrequency_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void outputSettings::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // baseName
    //
    if (n.name () == "baseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< baseName_type > r (
        baseName_traits::create (i, f, this));

      if (!baseName_.present ())
      {
        this->baseName_.set (::std::move (r));
        continue;
      }
    }

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!writeFrequency_.present ())
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!baseName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseName",
      "");
  }

  if (!writeFrequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "writeFrequency",
      "");
  }
}

outputSettings* outputSettings::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class outputSettings (*this, f, c);
}

outputSettings& outputSettings::
operator= (const outputSettings& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->baseName_ = x.baseName_;
    this->writeFrequency_ = x.writeFrequency_;
  }

  return *this;
}

outputSettings::
~outputSettings ()
{
}

// simulationParameters
//

simulationParameters::
simulationParameters (const end_t_type& end_t,
                      const delta_t_type& delta_t,
                      const start_t_type& start_t)
: ::xml_schema::type (),
  end_t_ (end_t, this),
  delta_t_ (delta_t, this),
  start_t_ (start_t, this)
{
}

simulationParameters::
simulationParameters (const simulationParameters& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  end_t_ (x.end_t_, f, this),
  delta_t_ (x.delta_t_, f, this),
  start_t_ (x.start_t_, f, this)
{
}

simulationParameters::
simulationParameters (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  end_t_ (this),
  delta_t_ (this),
  start_t_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulationParameters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // end_t
    //
    if (n.name () == "end_t" && n.namespace_ ().empty ())
    {
      if (!end_t_.present ())
      {
        this->end_t_.set (end_t_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // start_t
    //
    if (n.name () == "start_t" && n.namespace_ ().empty ())
    {
      if (!start_t_.present ())
      {
        this->start_t_.set (start_t_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!end_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "end_t",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!start_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start_t",
      "");
  }
}

simulationParameters* simulationParameters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulationParameters (*this, f, c);
}

simulationParameters& simulationParameters::
operator= (const simulationParameters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->end_t_ = x.end_t_;
    this->delta_t_ = x.delta_t_;
    this->start_t_ = x.start_t_;
  }

  return *this;
}

simulationParameters::
~simulationParameters ()
{
}

// cuboid
//

cuboid::
cuboid (const position_type& position,
        const velocity_type& velocity,
        const dimensions_type& dimensions,
        const distance_type& distance,
        const mass_type& mass)
: ::xml_schema::type (),
  position_ (position, this),
  velocity_ (velocity, this),
  dimensions_ (dimensions, this),
  distance_ (distance, this),
  mass_ (mass, this)
{
}

cuboid::
cuboid (::std::unique_ptr< position_type > position,
        ::std::unique_ptr< velocity_type > velocity,
        ::std::unique_ptr< dimensions_type > dimensions,
        const distance_type& distance,
        const mass_type& mass)
: ::xml_schema::type (),
  position_ (std::move (position), this),
  velocity_ (std::move (velocity), this),
  dimensions_ (std::move (dimensions), this),
  distance_ (distance, this),
  mass_ (mass, this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  dimensions_ (x.dimensions_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  velocity_ (this),
  dimensions_ (this),
  distance_ (this),
  mass_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->velocity_ = x.velocity_;
    this->dimensions_ = x.dimensions_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation > (
      ::simulation_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

